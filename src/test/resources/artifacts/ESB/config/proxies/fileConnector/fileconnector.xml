<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->

<proxy name="fileconnector" startOnLoad="true" statistics="disable" trace="disable"
       transports="https,http"
       xmlns="http://ws.apache.org/ns/synapse">
    <target>
        <inSequence>
            <property name="OUT_ONLY" value="true"/>
            <property name="ClientApiNonBlocking" value="true" scope="axis2" action="remove"/>
            <property name="source" expression="json-eval($.source)"/>
            <property name="destination" expression="json-eval($.destination)"/>
            <property name="inputContent" expression="json-eval($.inputContent)"/>
            <property name="encoding" expression="json-eval($.encoding)"/>
            <property name="contentType" expression="json-eval($.contentType)"/>
            <property name="filePattern" expression="json-eval($.filePattern)"/>
            <property name="recursiveSearch" expression="json-eval($.recursiveSearch)"/>
            <property name="dirPattern" expression="json-eval($.dirPattern)"/>
            <property name="streaming" expression="json-eval($.streaming)"/>
            <property name="setTimeout" expression="json-eval($.setTimeout)"/>
            <property name="setPassiveMode" expression="json-eval($.setPassiveMode)"/>
            <property name="setSoTimeout" expression="json-eval($.setSoTimeout)"/>
            <property name="setStrictHostKeyChecking"
                      expression="json-eval($.setStrictHostKeyChecking)"/>
            <property name="setUserDirIsRoot" expression="json-eval($.setUserDirIsRoot)"/>
            <property name="ftpUsername" expression="json-eval($.ftpUsername)"/>
            <property name="ftpPassword" expression="json-eval($.ftpPassword)"/>
            <property name="targetPath" expression="json-eval($.targetPath)"/>
            <property name="targetFile" expression="json-eval($.targetFile)"/>
            <property name="proxyHost" expression="json-eval($.proxyHost)"/>
            <property name="proxyPort" expression="json-eval($.proxyPort)"/>
            <property name="proxyUsername" expression="json-eval($.proxyUsername)"/>
            <property name="proxyPassword" expression="json-eval($.proxyPassword)"/>
            <property name="ftpServer" expression="json-eval($.ftpServer)"/>
            <property name="ftpPort" expression="json-eval($.ftpPort)"/>
            <property name="keepAliveTimeout" expression="json-eval($.keepAliveTimeout)"/>
            <property name="keepAliveTimeout" expression="json-eval($.keepAliveTimeout)"/>
            <property name="binaryTransfer" expression="json-eval($.binaryTransfer)"/>
            <property name="localActive" expression="json-eval($.localActive)"/>
            <property name="address" expression="json-eval($.address)"/>
            <property name="append" expression="json-eval($.append)"/>
            <property name="lineNumber" expression="json-eval($.lineNumber)"/>
            <property name="chunkSize" expression="json-eval($.chunkSize)"/>
            <property name="numberOfLines" expression="json-eval($.numberOfLines)"/>
            <property name="xpathExpression" expression="json-eval($.xpathExpression)"/>
            <property name="start" expression="json-eval($.start)"/>
            <property name="end" expression="json-eval($.end)"/>
            <property name="position" expression="json-eval($.position)"/>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:create">
                    <fileconnector.create>
                        <source>{$ctx:source}</source>
                        <inputContent>{$ctx:inputContent}</inputContent>
                        <encoding>{$ctx:encoding}</encoding>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.create>
                </case>
                <case regex="urn:append">
                    <fileconnector.append>
                        <destination>{$ctx:destination}</destination>
                        <inputContent>{$ctx:inputContent}</inputContent>
                        <position>{$ctx:position}</position>
                        <encoding>{$ctx:encoding}</encoding>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.append>
                </case>
                <case regex="urn:delete">
                    <fileconnector.delete>
                        <source>{$ctx:source}</source>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.delete>
                </case>
                <case regex="urn:copy">
                    <fileconnector.copy>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.copy>
                </case>
                <case regex="urn:archive">
                    <fileconnector.archives>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.archives>
                </case>
                <case regex="urn:isFileExist">
                    <fileconnector.isFileExist>
                        <source>{$ctx:source}</source>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.isFileExist>
                </case>
                <case regex="urn:move">
                    <fileconnector.move>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.move>
                </case>
                <case regex="urn:read">
                    <fileconnector.read>
                        <source>{$ctx:source}</source>
                        <streaming>{$ctx:streaming}</streaming>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <contentType>{$ctx:contentType}</contentType>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.read>
                </case>
                <case regex="urn:readSpecifiedLines">
                    <fileconnector.readSpecifiedLines>
                        <source>{$ctx:source}</source>
                        <contentType>{$ctx:contentType}</contentType>
                        <start>{$ctx:start}</start>
                        <end>{$ctx:end}</end>
                    </fileconnector.readSpecifiedLines>
                </case>
                <case regex="urn:getLastModifiedTime">
                    <fileconnector.getLastModifiedTime>
                        <source>{$ctx:source}</source>
                    </fileconnector.getLastModifiedTime>
                </case>
                <case regex="urn:getSize">
                    <fileconnector.getSize>
                        <source>{$ctx:source}</source>
                    </fileconnector.getSize>
                </case>
                <case regex="urn:readALine">
                    <fileconnector.readALine>
                        <source>{$ctx:source}</source>
                        <lineNumber>{$ctx:lineNumber}</lineNumber>
                    </fileconnector.readALine>
                </case>
                <case regex="urn:splitFile">
                    <fileconnector.splitFile>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <chunkSize>{$ctx:chunkSize}</chunkSize>
                        <numberOfLines>{$ctx:numberOfLines}</numberOfLines>
                        <xpathExpression>{$ctx:xpathExpression}</xpathExpression>
                    </fileconnector.splitFile>
                </case>
                <case regex="urn:mergeFiles">
                    <fileconnector.mergeFiles>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <filePattern>{$ctx:filePattern}</filePattern>
                    </fileconnector.mergeFiles>
                </case>
                <case regex="urn:unzip">
                    <fileconnector.unzip>
                        <source>{$ctx:source}</source>
                        <destination>{$ctx:destination}</destination>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.unzip>
                </case>
                <case regex="urn:listFileZip">
                    <fileconnector.listFileZip>
                        <source>{$ctx:source}</source>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.listFileZip>
                </case>
                <case regex="urn:search">
                    <fileconnector.search>
                        <source>{$ctx:source}</source>
                        <filePattern>{$ctx:filePattern}</filePattern>
                        <recursiveSearch>{$ctx:recursiveSearch}</recursiveSearch>
                        <setTimeout>{$ctx:setTimeout}</setTimeout>
                        <setPassiveMode>{$ctx:setPassiveMode}</setPassiveMode>
                        <setSoTimeout>{$ctx:setSoTimeout}</setSoTimeout>
                        <setUserDirIsRoot>{$ctx:setUserDirIsRoot}</setUserDirIsRoot>
                        <setStrictHostKeyChecking>{$ctx:setStrictHostKeyChecking}</setStrictHostKeyChecking>
                    </fileconnector.search>
                </case>
                <case regex="urn:ftpOverProxy">
                    <fileconnector.ftpOverProxy>
                        <ftpUsername>{$ctx:ftpUsername}</ftpUsername>
                        <ftpPassword>{$ctx:ftpPassword}</ftpPassword>
                        <targetPath>{$ctx:targetPath}</targetPath>
                        <targetFile>{$ctx:targetFile}</targetFile>
                        <proxyHost>{$ctx:proxyHost}</proxyHost>
                        <proxyPort>{$ctx:proxyPort}</proxyPort>
                        <proxyUsername>{$ctx:proxyUsername}</proxyUsername>
                        <proxyPassword>{$ctx:proxyPassword}</proxyPassword>
                        <ftpServer>{$ctx:ftpServer}</ftpServer>
                        <ftpPort>{$ctx:ftpPort}</ftpPort>
                        <keepAliveTimeout>{$ctx:keepAliveTimeout}</keepAliveTimeout>
                        <controlKeepAliveReplyTimeout>{$ctx:controlKeepAliveReplyTimeout}</controlKeepAliveReplyTimeout>
                        <binaryTransfer>{$ctx:binaryTransfer}</binaryTransfer>
                        <localActive>{$ctx:localActive}</localActive>
                    </fileconnector.ftpOverProxy>
                </case>
                <case regex="urn:send">
                    <fileconnector.send>
                        <address>{$ctx:address}</address>
                        <append>{$ctx:append}</append>
                    </fileconnector.send>
                </case>
            </switch>
            <respond/>
        </inSequence>
    </target>
    <description/>
</proxy>